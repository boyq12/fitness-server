{"version":3,"sources":["../src/auth/authenticate.ts"],"names":[],"mappings":";;AAAA,uCAAgC;AAEhC,uDAAiD;AACjD,4CAAyC;AACzC,2EAAmE;AAEnE,IAAI,gBAAgB,GAAG;IACnB,cAAc;IACd,QAAQ;IACR,cAAc;IACd,sBAAsB;IACtB,sBAAsB;IACtB,cAAc;CACjB,CAAC;AAEF,KAAK,yBAAyB,IAAI,EAAE,IAAI;IACpC,EAAE,CAAA,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;QACpB,IAAI,OAAO,GAAG,MAAM,eAAO,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,OAAO,CAAC,MAAM,CAAC;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE;SACxB,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AAEY,QAAA,YAAY,GAAG;IACxB,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;QAC9B,IAAI,CAAC;YACD,IAAI,OAAO,GAAG,GAAG,CAAC,WAAW,CAAC;YAE9B,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,gBAAgB,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACvB,MAAM,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC;YAED,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;YACtC,IAAI,MAAM,GAAG,MAAM,cAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAEtC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpD,GAAG,CAAC,GAAG,GAAG,CAAE,MAAc,CAAC,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC;gBACnD,MAAM,CAAC,IAAI,EAAE,CAAC;YAClB,CAAC;YAED,cAAc,CAAE,MAAc,CAAC,IAAI,EAAG,MAAc,CAAC,IAAI,CAAC,CAAC;YAE3D,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC;YACjB,MAAM,CAAC,IAAI,EAAE,CAAC;QAClB,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,2BAAgB,CAAC,KAAK,CAAC;gBACrC,IAAI,EAAE,4BAAY,CAAC,aAAa;gBAChC,OAAO,EAAE,eAAe;gBACxB,KAAK,EAAE,IAAI;aACZ,CAAC,CAAC,CAAC;QACR,CAAC;IACL,CAAC;CACJ,CAAC;AAEF,kBAAe,oBAAY,CAAC","file":"authenticate.js","sourcesContent":["import auth from \"../libs/auth\";\r\nimport helper from \"helpers/common/controller-helper\";\r\nimport {ResponseCode} from \"enums/response-code\";\r\nimport {schemas} from \"../schemas/index\";\r\nimport responseTemplate from \"../helpers/common/response-template\";\r\n\r\nvar excludeAuthPaths = [\r\n    \"/staff-login\",\r\n    \"/login\",\r\n    \"/token/check\",\r\n    \"/user/forgotpassword\",\r\n    \"/user/reset-password\",\r\n    \"/user/active\"\r\n];\r\n\r\nasync function updateViewTime(p_id, role) {\r\n    if(role == \"merchant\") {\r\n        let profile = await schemas.UserProfile.findByPrimary(p_id);\r\n        await profile.update({\r\n            last_view: new Date()\r\n        });\r\n    }\r\n}\r\n\r\nexport const authenticate = {\r\n    async mIsAuthorized(req, res, next) {\r\n        try {\r\n            let baseUrl = req.originalUrl;\r\n\r\n            for (let path of excludeAuthPaths) {\r\n                if (baseUrl.contains(path))\r\n                    return next();\r\n            }\r\n\r\n            let token = req.headers.authorization;\r\n            let result = await auth.verify(token);\r\n\r\n            if (req.method == \"POST\" && baseUrl.endsWith(\"/user\")) {\r\n                req.jwt = !(result as any).error && result || null;\r\n                return next();\r\n            }\r\n\r\n            updateViewTime((result as any).p_id, (result as any).role);\r\n\r\n            req.jwt = result;\r\n            return next();\r\n        } catch (e) {\r\n            console.error(e);\r\n            return res.send(responseTemplate.error({\r\n              code: ResponseCode.ACCESS_DENIED,\r\n              message: 'Access denied',\r\n              error: null\r\n            }));\r\n        }\r\n    },\r\n};\r\n\r\nexport default authenticate;\r\n"]}