{"version":3,"sources":["../src/controllers/v1/login.ts"],"names":[],"mappings":";;AACA,2DAAsD;AACtD,2CAAsC;AACtC,0CAAmC;AACnC,0CAAmC;AACnC,uDAAiD;AACjD,8EAAsE;AAEtE,WAAY,SAAQ,yBAAW;IAE7B,KAAK,CAAC,MAAM,CAAC,GAAY,EAAE,GAAa;QACtC,IAAI,CAAC;YACH,IAAI,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;YACjC,IAAI,IAAI,GAAG,MAAM,iBAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAC,KAAK,EAAC,EAAC,CAAC,CAAC;YACrE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,2BAAgB,CAAC,KAAK,CAAC;oBACrC,IAAI,EAAE,4BAAY,CAAC,cAAc;oBACjC,OAAO,EAAE,oBAAoB;oBAC7B,KAAK,EAAE,EAAC,OAAO,EAAE,oBAAoB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAC;iBAClE,CAAC,CAAC,CAAC;YACN,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,cAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,2BAAgB,CAAC,KAAK,CAAC;oBACrC,IAAI,EAAE,4BAAY,CAAC,oBAAoB;oBACvC,OAAO,EAAE,gBAAgB;oBACzB,KAAK,EAAE,EAAC,OAAO,EAAE,gBAAgB,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAC;iBACpE,CAAC,CAAC,CAAC;YACN,CAAC;YACD,IAAI,OAAO,GAAG,MAAM,iBAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACnD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAC3B,OAAO,MAAM,CAAC,QAAQ,CAAC;YACvB,IAAI,GAAG,GAAG,MAAM,cAAI,CAAC,WAAW,CAAC;gBAC/B,EAAE,EAAE,MAAM,CAAC,EAAE;gBACb,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;aAClB,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEjB,MAAM,OAAO,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,EAAC,CAAC,CAAC;YACvF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,2BAAgB,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC9E,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,2BAAgB,CAAC,KAAK,CAAC;gBACrC,IAAI,EAAE,4BAAY,CAAC,qBAAqB;gBACxC,OAAO,EAAE,uBAAuB;gBAChC,KAAK,EAAE,CAAC;aACT,CAAC,CAAC,CAAC;QACN,CAAC;IACH,CAAC;CACF;AAED,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAC1B,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"login.js","sourcesContent":["import {Request, Response} from \"express\";\r\nimport {AController} from \"../interfaces/AController\";\r\nimport {schemas} from \"../../schemas\";\r\nimport misc from \"../../libs/misc\";\r\nimport auth from \"../../libs/auth\";\r\nimport {ResponseCode} from \"enums/response-code\";\r\nimport ResponseTemplate from \"../../helpers/common/response-template\";\r\n\r\nclass Login extends AController {\r\n\r\n  async create(req: Request, res: Response) {\r\n    try {\r\n      let {email, password} = req.body;\r\n      let user = await schemas.User.scope(\"all\").findOne({where: {email}});\r\n      if (!user) {\r\n        return res.send(ResponseTemplate.error({\r\n          code: ResponseCode.DATA_NOT_FOUND,\r\n          message: \"Email is not found\",\r\n          error: {message: \"Email is not found\", key: 'email', data: email}\r\n        }));\r\n      }\r\n      if (user.password != misc.sha256(password)) {\r\n        return res.send(ResponseTemplate.error({\r\n          code: ResponseCode.LOGIN_WRONG_PASSWORD,\r\n          message: \"Wrong password\",\r\n          error: {message: \"Wrong password\", key: 'password', data: password}\r\n        }));\r\n      }\r\n      let session = await schemas.UserSession.create({});\r\n      let j_user = user.toJSON();\r\n      delete j_user.password;\r\n      let jwt = await auth.createToken({\r\n        id: j_user.id,\r\n        username: j_user.username,\r\n        role: j_user.role\r\n      });\r\n      console.log(jwt);\r\n      \r\n      await session.update({token: jwt.token, expired_at: new Date(jwt.payload.exp * 1000)});\r\n      return res.send(ResponseTemplate.success({token: jwt.token, data: j_user}));\r\n    } catch (e) {\r\n      console.error(e);\r\n      return res.send(ResponseTemplate.error({\r\n        code: ResponseCode.SERVER_INTERNAL_ERROR,\r\n        message: 'Server internal error',\r\n        error: e\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nconst login = new Login();\r\nmodule.exports = login;\r\n"]}