{"version":3,"sources":["../src/controllers/v1/schedule.ts"],"names":[],"mappings":"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","file":"schedule.js","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { AController } from \"../interfaces/AController\";\r\nimport { schemas, sequelize } from \"../../schemas\";\r\nimport misc from \"../../libs/misc\";\r\nimport { ResponseCode } from \"enums/response-code\";\r\nimport ResponseTemplate from \"../../helpers/common/response-template\";\r\nimport * as config from \"../../libs/config\";\r\n\r\nimport engine from \"../../libs/schedule_engine\";\r\n\r\n\r\nclass Schedule extends AController {\r\n\r\n    async retrieve(req: Request, res: Response) {\r\n        try {\r\n            let id = req.params.id;\r\n            return res.send(ResponseTemplate.success({\r\n                success: true,\r\n                data: {}\r\n            }));\r\n        } catch (error) {\r\n            console.error(error.stack);\r\n            return res.send(ResponseTemplate.error({\r\n                code: 404,\r\n                message: \"Internal Error\",\r\n                error: error\r\n            }));\r\n        }\r\n    }\r\n\r\n    async createGymSchedule(req: Request, res: Response) {\r\n        try {\r\n            let { duration, userId } = req.body;\r\n            let target = await schemas.Target.findOne({\r\n                where: {\r\n                    user_id: userId\r\n                }\r\n            });\r\n            \r\n            let user = await schemas.User.findOne({\r\n                where: {\r\n                    id: userId\r\n                },\r\n                include: [{model: schemas.Information}]\r\n            });            \r\n            if (!target) {\r\n                return res.send(ResponseTemplate.error({\r\n                    code: 404,\r\n                    message: \"No target found\",\r\n                    error: null\r\n                }));\r\n            }\r\n            let gyms = await schemas.Gym.findAll({\r\n                where: {\r\n                    muscle_id: {\r\n                        in: target.muscle_ids\r\n                    }\r\n                }\r\n            });\r\n            \r\n            if (!gyms) {\r\n                gyms = await schemas.Gym.findAll();\r\n            }\r\n            console.log(\"111111111111111111111111111111111\");\r\n            \r\n            let timeNow = new Date();\r\n            timeNow.setHours(0);\r\n            timeNow.setMinutes(0);\r\n            let dateNow = timeNow.getDate()\r\n            let beginnerTime = new Date();\r\n            beginnerTime.setDate(dateNow -config.schedule.beginnerTime);\r\n            beginnerTime.setHours(0);\r\n            beginnerTime.setMinutes(0);\r\n            let scheduleInPreBeginnerTime = await schemas.Schedule.findOne({\r\n                where: {\r\n                    time: {\r\n                        $lt: beginnerTime\r\n                    },\r\n                    user_id: userId\r\n                }\r\n            });\r\n            \r\n            console.log(\"111111111111111111111111111111111\");\r\n\r\n            let limitTimeForGym = new Date();\r\n            limitTimeForGym.setDate(dateNow - config.schedule.limitDate);\r\n            limitTimeForGym.setHours(0);\r\n            limitTimeForGym.setMinutes(0);\r\n            let preLimitScheduleDay = await schemas.Schedule.findAll({\r\n                where: {\r\n                    time: {\r\n                        $gt: limitTimeForGym\r\n                    },\r\n                    user_id: userId\r\n                }\r\n            });\r\n\r\n            let limitTimeFrequency = new Date();\r\n            limitTimeFrequency.setDate(dateNow - config.schedule.frequencyRange);\r\n            limitTimeFrequency.setHours(0);\r\n            limitTimeFrequency.setMinutes(0);\r\n\r\n            let frequency = await schemas.Schedule.findAll({\r\n                where: {\r\n                    time: {\r\n                        $gt: limitTimeFrequency \r\n                    },\r\n                    user_id: userId\r\n                },\r\n                group: [\"gym_id\", \"id\"],\r\n                attribute: [\"gym_id\", [sequelize.fn(\"COUNT\", \"gym_id\"), \"gym_count\"]]\r\n            });\r\n\r\n            \r\n\r\n            //result\r\n            let result = [];\r\n            //get preDayGyms\r\n            let preScheduleByDate = [];\r\n            for (let i = 0; i < config.schedule.limitDate; i++) {\r\n                let selectTime = new Date();\r\n\r\n                selectTime.setDate(dateNow -(i + 1));\r\n                selectTime.setHours(0);\r\n                selectTime.setMinutes(0);\r\n                preLimitScheduleDay[i] = preLimitScheduleDay.filter(g => (g.created_at >= selectTime && g.created_at < timeNow));\r\n            }\r\n            //isBeginner\r\n            let beginner = true;\r\n            if (scheduleInPreBeginnerTime) {\r\n                beginner = false;\r\n            }\r\n\r\n            //fequency\r\n            let sumCount = 0\r\n            if(!frequency) {\r\n                frequency.forEach(f => {\r\n                    sumCount+=f.gym_count;\r\n                });\r\n            }\r\n\r\n            let gender = user.gender;\r\n            let weight = user.Information.filter(v => v.name==\"Weight\")[0].value;\r\n            let height = user.Information.filter(v => v.name==\"Height\")[0].value;\r\n            let age = user.Information.filter(v => v.name==\"Age\")[0].value;\r\n            let newSchedule = engine.generateSchedule(7, gyms, preScheduleByDate, beginner, frequency, sumCount, [], 800, gender, weight, height, age);\r\n            //generated newSchedule\r\n            \r\n            await schemas.Schedule.destroy({\r\n                where: {\r\n                    time: {\r\n                        $gte: timeNow\r\n                    },\r\n                    user_id: userId\r\n                }\r\n            });\r\n\r\n            for(let i = 0; i< newSchedule.length; i++){\r\n                let time = new Date();\r\n                time.setHours(0);\r\n                time.setMinutes(0);\r\n                time.setDate(dateNow+i);\r\n                let a = newSchedule[i].map(g => ({\r\n                    time: time,\r\n                    gym_id: g.id,\r\n                    user_id: userId\r\n                }));\r\n                \r\n                await schemas.Schedule.bulkCreate(a);\r\n            }\r\n            \r\n            let resultData = await schemas.Schedule.findAll({\r\n                where: {\r\n                    time: {\r\n                        $gte: timeNow\r\n                    },\r\n                    user_id: userId\r\n                },\r\n                order: [\"time\"]\r\n            })\r\n\r\n            return res.send(ResponseTemplate.success({\r\n                success: true,\r\n                data: resultData\r\n            }));\r\n            \r\n\r\n        } catch (error) {\r\n            console.error(error.stack);\r\n            return res.send(ResponseTemplate.error({\r\n                code: 404,\r\n                message: \"Internal Error\",\r\n                error: error\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nconst schedule = new Schedule();\r\nmodule.exports = schedule;\r\n\r\n"]}