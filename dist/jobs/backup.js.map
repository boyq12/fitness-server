{"version":3,"sources":["../src/jobs/backup.ts"],"names":[],"mappings":";AAAA,wCAA8C;AAE9C,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AACzD,IAAI,CAAC;IACH,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACzB,CAAC;AAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;AACd,iBAAS;IACP,mBAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;QACjC,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC,MAAM,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC;QACzB,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACrB,IAAI,UAAU,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAC,EAAE,CAAC,CAAC;QACjE,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACjD,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAC,GAAG,EAAC,EAAE;YACvB,IAAI,CAAC;gBACH,IAAI,KAAK,GAAG,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAClC,IAAI,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAC9B,CAAC,CAAC;gBACH,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CACxB,UAAU,EAAE,GAAG,GAAG,OAAO,CAC1B,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACpC,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;gBACpD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAA","file":"backup.js","sourcesContent":["import {schemas, sequelize} from \"../schemas\";\r\nimport misc from \"libs/misc\";\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst dumpPath = path.join(__dirname,'..', '..', 'dump');\r\ntry {\r\n  fs.mkdirSync(dumpPath);\r\n} catch (e) {}\r\nexport = function main() {\r\n  sequelize.sync().then(async (rs) => {\r\n    let keys = Object.keys(sequelize.models);\r\n    if (!keys.length) return;\r\n    let NOW = new Date();\r\n    let folderName = NOW.toISOString().substr(0,19).replace(/:/g,'');\r\n    let folderPath = path.join(dumpPath, folderName);\r\n    fs.mkdirSync(folderPath);\r\n    keys.forEach(async key => {\r\n      try {\r\n        let Model = sequelize.models[key];\r\n        let data = await Model.findAll({\r\n        });\r\n        fs.writeFileSync(path.join(\r\n          folderPath, key + '.json'\r\n        ), JSON.stringify(data, null, 2));\r\n      } catch (e) {\r\n        console.log('::::::::::::');\r\n        console.log(`cannot export \"${key}\": ${e.message}`);\r\n        console.log('::::::::::::');\r\n      }\r\n    })\r\n  });\r\n}\r\n"]}