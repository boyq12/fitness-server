{"version":3,"sources":["../src/schemas/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,6CAA6C;AAG7C,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,yCAAyC;AACzC,wDAAwD;AAExD;IAKI;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEhD,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EACtE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,GAAI,EAAU,CAAC;QAE3B,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE;YAC9C,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;QACvI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;YACxB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,OAAO,CAAE,KAAa,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,SAAiB,EAAE,EAAE;YACpD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpD,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE;YAClE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;QAC1D,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;YACxB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS;QACL,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,YAAY;QACR,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;CACJ;AAGD,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;AACnB,QAAA,OAAO,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;AAC/B,QAAA,SAAS,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC","file":"index.js","sourcesContent":["'use strict';\r\n\r\nimport {Sequelize} from \"sequelize\";\r\nimport * as SequelizeStatic from \"sequelize\";\r\n\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nimport * as config from \"../libs/config\";\r\nimport * as eventEmmiter from \"../events/event-emitter\";\r\n\r\nclass Database {\r\n    private _basename: string;\r\n    private _models: any;\r\n    private _sequelize: Sequelize;\r\n\r\n    constructor() {\r\n        this._basename = path.basename(module.filename);\r\n\r\n        let dbConfig = config.database;\r\n        this._sequelize = new SequelizeStatic(dbConfig.database, dbConfig.username,\r\n            dbConfig.password, dbConfig);\r\n        this._models = ({} as any);\r\n\r\n        fs.readdirSync(__dirname).filter((file: string) => {\r\n            return (file !== this._basename) && (file !== \"interfaces\") && (file != \"hooks\") && path.extname(file) != \".map\" && file[0] != \".\";\r\n        }).forEach((file: string) => {\r\n            let model = this._sequelize.import(path.join(__dirname, file));\r\n            this._models[(model as any).name] = model;\r\n        });\r\n\r\n        Object.keys(this._models).forEach((modelName: string) => {\r\n            if (typeof this._models[modelName].associate === \"function\") {\r\n                this._models[modelName].associate(this._models);\r\n            }\r\n        });\r\n\r\n        fs.readdirSync(path.join(__dirname, \"hooks\")).filter((file: string) => {\r\n            return path.extname(file) != \".map\" && file[0] != \".\";\r\n        }).forEach((file: string) => {\r\n            var hook = require(path.join(__dirname, \"hooks\", file));\r\n            hook(this._models, eventEmmiter);\r\n        });\r\n    }\r\n\r\n    getModels() {\r\n        return this._models;\r\n    }\r\n\r\n    getSequelize() {\r\n        return this._sequelize;\r\n    }\r\n}\r\n\r\n\r\nconst database = new Database();\r\nexport const schemas = database.getModels();\r\nexport const sequelize = database.getSequelize();\r\n"]}